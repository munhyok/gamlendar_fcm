name: Gamlendar Game Notification Workflow

on:
  push:
    branches:
      - main
#   schedule:
#     - cron: "0 0 * * *" #매일 오전 9시 실행

jobs:
  run_python_script:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v3

      # Python 설치
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 의존성 설치
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up strongSwan dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y install strongswan xl2tpd

      - name: Configure strongSwan
        env:
          VPN_SERVER_IP: ${{ secrets.VPN_SERVER }}
          VPN_PSK: ${{ secrets.VPN_PSK }}
        run: |
          mkdir -p ./vpn-config

          cat > ./vpn-config/ipsec.conf <<EOF
          # ipsec.conf - strongSwan IPsec configuration file

          config setup

          conn %default
            ikelifetime=60m
            keylife=20m
            rekeymargin=3m
            keyingtries=1
            keyexchange=ikev1
            authby=secret
            ike=aes256-sha1-modp2048,aes128-sha1-modp2048!
            esp=aes256-sha1-modp2048,aes128-sha1-modp2048!

          conn myvpn
            keyexchange=ikev1
            left=%defaultroute
            auto=add
            authby=secret
            type=transport
            leftprotoport=17/1701
            rightprotoport=17/1701
            right=$VPN_SERVER_IP
          EOF

          cat > ./vpn-config/ipsec.secrets <<EOF
          : PSK "$VPN_PSK"
          EOF

          
          sudo cp ./vpn-config/ipsec.conf /etc/ipsec.conf
          sudo cp ./vpn-config/ipsec.secrets /etc/ipsec.secrets
          sudo chmod 600 /etc/ipsec.secrets
          sudo systemctl restart ipsec

          sleep 10

      - name: Configure xl2tpd
        env:
          VPN_SERVER_IP: ${{ secrets.VPN_SERVER }}
          VPN_USER: ${{ secrets.VPN_USERNAME }}
          VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
        run: |
          mkdir -p ./vpn-config

          cat > ./vpn-config/xl2tpd.conf <<EOF
          [lac myvpn]
          lns = $VPN_SERVER_IP
          ppp debug = yes
          pppoptfile = /etc/ppp/options.l2tpd.client
          length bit = yes
          EOF

          cat > ./vpn-config/options.l2tpd.client <<EOF
          ipcp-accept-local
          ipcp-accept-remote
          refuse-eap
          require-chap
          noccp
          noauth
          mtu 1280
          mru 1280
          noipdefault
          defaultroute
          usepeerdns
          connect-delay 5000
          name $VPN_USER
          password $VPN_PASSWORD
          EOF

          
          sudo cp ./vpn-config/xl2tpd.conf /etc/xl2tpd/xl2tpd.conf
          sudo cp ./vpn-config/options.l2tpd.client /etc/ppp/options.l2tpd.client
          sudo chmod 600 /etc/ppp/options.l2tpd.client
          sudo systemctl restart xl2tpd

          sleep 10

      - name: Start VPN connection
        run: |
          
          echo "c myvpn" | sudo tee /var/run/xl2tpd/l2tp-control
          sleep 10

          

      - name: Add routing table
        run: |
          
          PPP_IP=$(ip -4 addr show ppp0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
          echo "PPP IP Address: $PPP_IP"

          
          GATEWAY=192.168.0.1
          echo "Setting gateway: $GATEWAY"

          
          sudo ip route add -net 192.168.0.0 netmask 255.255.255.0 gw $GATEWAY dev ppp0
          sudo ip route add -net 0.0.0.0 netmask 0.0.0.0 gw $GATEWAY dev ppp0

          
          ip route

      - name: Verify VPN connection
        run: |
          ip a
          ip route

      - name: create-json
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "serviceAccountKey.json"
          json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      # main.py 실행
      - name: Run Python script
        env:
          REDIS_CACHE_HOST: ${{secrets.REDIS_CACHE_HOST}}
          REDIS_CACHE_PORT: ${{secrets.REDIS_CACHE_PORT}}
          REDIS_PASSWORD: ${{secrets.REDIS_PASSWORD}}
        
        run: |
          python main.py

      - name: Remove serviceAccountKey
        run: rm -rf serviceAccountKey.json
